# Git Attributes Configuration for Greenland Glacier Flow Project
# ==================================================================
# 
# This file ensures consistent line endings across different operating systems
# and development environments (Windows, WSL, Linux, macOS).
#
# WHY THIS FILE EXISTS:
# ---------------------
# Problem: When working across Windows and WSL (or Linux), Git may convert line
# endings between CRLF (Windows: \r\n) and LF (Unix: \n). Python interpreters
# on Linux/WSL fail to parse files with CRLF endings, causing errors like:
#   "IndentationError: unexpected indent"
#
# Solution: This file tells Git to ALWAYS use LF (Unix-style) line endings for
# code files in the repository, regardless of the operating system used for
# development or committing.
#
# WORKFLOW COMPATIBILITY:
# -----------------------
# ✅ Works when committing from Windows
# ✅ Works when committing from WSL/Linux
# ✅ Works when committing from macOS
# ✅ Python scripts execute correctly in all environments
# ✅ Team members can use their preferred OS without conflicts
#
# HOW IT WORKS:
# -------------
# - Files are STORED in the repository with LF line endings
# - Files are CHECKED OUT to your working directory with LF line endings
# - When you commit, Git ensures LF endings are used
# - No conversion happens based on your OS
#
# REFERENCES:
# -----------
# - Git documentation: https://git-scm.com/docs/gitattributes
# - Line ending guide: https://docs.github.com/en/get-started/getting-started-with-git/configuring-git-to-handle-line-endings
#
# Date created: October 3, 2025
# Last updated: October 3, 2025
# Maintainer: B. Yadav
# ==================================================================

# Python source files - CRITICAL for cross-platform compatibility
*.py text eol=lf

# Shell scripts - must use LF for execution on Unix systems
*.sh text eol=lf

# Configuration files - use LF for consistency
*.ini text eol=lf
*.cfg text eol=lf
*.conf text eol=lf
*.yml text eol=lf
*.yaml text eol=lf
*.toml text eol=lf

# Documentation files - use LF for consistency
*.md text eol=lf
*.rst text eol=lf
*.txt text eol=lf

# Data description files
*.json text eol=lf
*.xml text eol=lf
*.csv text eol=lf

# Jupyter notebooks - must use LF
*.ipynb text eol=lf

# C/C++ source files (if any in future)
*.c text eol=lf
*.h text eol=lf
*.cpp text eol=lf
*.hpp text eol=lf

# Makefiles and build scripts - must use LF
Makefile text eol=lf
*.cmake text eol=lf

# Git configuration files
.gitignore text eol=lf
.gitattributes text eol=lf
.gitmodules text eol=lf

# Docker files
Dockerfile* text eol=lf
*.dockerfile text eol=lf
docker-compose.yml text eol=lf

# Binary files - do NOT apply line ending conversion
# ==================================================================
# Geospatial data files
*.tif binary
*.tiff binary
*.geotiff binary
*.nc binary
*.hdf binary
*.hdf5 binary
*.h5 binary
*.gpkg binary
*.shp binary
*.shx binary
*.dbf binary

# Image files
*.png binary
*.jpg binary
*.jpeg binary
*.gif binary
*.ico binary
*.svg binary

# Archive files
*.zip binary
*.tar binary
*.gz binary
*.bz2 binary
*.7z binary

# Other binary formats
*.pdf binary
*.exe binary
*.dll binary
*.so binary
*.dylib binary

# Git LFS tracking (if used in future)
# ==================================================================
# Uncomment these lines if you decide to use Git LFS for large files:
# *.tif filter=lfs diff=lfs merge=lfs -text
# *.nc filter=lfs diff=lfs merge=lfs -text
# *.hdf5 filter=lfs diff=lfs merge=lfs -text

# Default behavior for unspecified files
# ==================================================================
# Let Git automatically detect text files and normalize line endings
* text=auto

# NOTES FOR COLLABORATORS:
# ==================================================================
# 1. After pulling this file, you may need to refresh your working directory:
#    git rm --cached -r .
#    git reset --hard
#    
# 2. If you've already committed files with CRLF, they won't auto-convert.
#    To normalize all files, run:
#    git add --renormalize .
#    git commit -m "Normalize line endings"
#
# 3. Your local Git config should NOT override these settings. If you have
#    global settings like core.autocrlf=true, they will be respected for
#    files not listed here, but files listed above will ALWAYS use LF.
#
# 4. Windows users: Your text editors (VS Code, Notepad++, etc.) will respect
#    these LF endings. The files will work correctly even though Windows
#    typically uses CRLF.
#
# 5. If you encounter any issues, check:
#    - File line endings: cat -A filename.py (should show $ at line ends)
#    - Git autocrlf setting: git config --get core.autocrlf
#    - This file is in repository root: ls -la .gitattributes
