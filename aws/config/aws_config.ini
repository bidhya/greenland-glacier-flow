# AWS-specific configuration for Greenland glacier flow processing
# This file contains AWS cloud service settings and preferences

[AWS_ACCOUNT]
# AWS account and access settings
aws_region = us-west-2
# aws_profile = glacier-processing  # Optional: AWS CLI profile to use
# account_id = 123456789012  # Your AWS account ID

[STORAGE]
# S3 bucket configuration for data storage
# NOTE: Bucket must exist and user must have read/write access
# If bucket doesn't exist, ask admin to create or grant s3:CreateBucket permission
s3_bucket = greenland-glacier-data

# S3 output structure (matches local/HPC structure)
# Results organized as: s3://{bucket}/{s3_base_path}/{satellite}/{subfolders}/
# Example: s3://greenland-glacier-data/1_download_merge_and_clip/sentinel2/clipped/134_Arsuk/
s3_base_path = 1_download_merge_and_clip

# Subfolder structure (automatically created):
# For Sentinel-2: download/, clipped/, metadata/, template/
# For Landsat: {region_name}/, _reference/
# This mirrors local structure at /home/bny/greenland_glacier_flow/1_download_merge_and_clip/

[COMPUTE]
# Default compute settings for AWS services
instance_type = c5.large
spot_instances = false
max_vcpus = 256

# AWS Batch specific settings
batch_compute_environment = glacier-processing-env
batch_job_queue = glacier-processing-queue
batch_job_definition = satellite-processing

# ECS specific settings  
ecs_cluster = glacier-processing-cluster
ecs_task_definition = satellite-processing-task
ecs_subnets = subnet-12345,subnet-67890
ecs_security_groups = sg-processing

[NOTIFICATIONS]
# SNS topic for job notifications
sns_topic_arn = arn:aws:sns:us-east-1:123456789012:glacier-processing-notifications
# email_notifications = true

[SECURITY]
# IAM role for processing jobs
iam_execution_role = arn:aws:iam::123456789012:role/GlacierProcessingExecutionRole
iam_task_role = arn:aws:iam::123456789012:role/GlacierProcessingTaskRole

[COST_OPTIMIZATION]
# Cost management settings
use_spot_instances = false
spot_allocation_strategy = diversified
# budget_limit = 100  # Monthly budget limit in USD
# cost_alerts = true

[MONITORING]
# CloudWatch settings for monitoring
log_group = /aws/glacier-processing
log_retention_days = 30
enable_detailed_monitoring = false

[LAMBDA]
# AWS Lambda function configuration for satellite processing
# Validated through extensive testing (October 2025)
function_name = glacier-sentinel2-processor
# Memory: 5120 MB (5 GB) - optimal for small glaciers (1-2 tiles)
memory_size = 5120
# Timeout: 900 seconds (15 minutes)
timeout = 900
# Ephemeral storage: 10240 MB (10 GB /tmp storage)
ephemeral_storage = 10240

# Memory sizing guide based on glacier size:
# Small glaciers (1-2 tiles): 5120 MB (5 GB) - PROVEN SUCCESSFUL ✅
# Medium glaciers (2-3 tiles): 8192-10240 MB (8-10 GB) - UNTESTED
# Large glaciers (4+ tiles): IMPOSSIBLE on Lambda (tested to 10 GB max) ❌
# 
# Testing results (191_Hagen_Brae - 4 tiles):
# - 5 GB: Failed at 155s (32% progress)
# - 8 GB: Failed at 205s (43% progress)
# - 10 GB: Failed at 301s (63% progress) - Lambda maximum
# See: aws/docs/OPTIMIZATION_VALIDATION_OCT8_2025.md

# Lambda deployment configuration
ecr_repository = glacier-sentinel2-processor
ecr_image_tag = latest
dockerfile_path = aws/lambda/Dockerfile.lambda

# Runtime settings
python_version = 3.12
architecture = x86_64

[EXPERIMENTAL]
# Settings for experimental features
# Changed to true - Lambda is production ready for small glaciers
enable_lambda_processing = true
enable_step_functions = false
# parallel_processing_regions = 4